# Generated from Portugol.g4 by ANTLR 4.5.3
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2&")
        buf.write("\u00e0\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f")
        buf.write("\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\26")
        buf.write("\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\37")
        buf.write("\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\7#\u00cb\n#\f#\16#\u00ce")
        buf.write("\13#\3$\6$\u00d1\n$\r$\16$\u00d2\3$\3$\6$\u00d7\n$\r$")
        buf.write("\16$\u00d8\5$\u00db\n$\3%\3%\3%\3%\2\2&\3\3\5\4\7\5\t")
        buf.write("\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"C#E$G%I&\3\2\6\4\2C\\c|\5\2\62")
        buf.write(";C\\c|\3\2\62;\5\2\13\f\17\17\"\"\u00e3\2\3\3\2\2\2\2")
        buf.write("\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3")
        buf.write("\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2")
        buf.write("\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2")
        buf.write("\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3")
        buf.write("\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\3K\3\2\2\2\5P")
        buf.write("\3\2\2\2\7R\3\2\2\2\tV\3\2\2\2\13X\3\2\2\2\r`\3\2\2\2")
        buf.write("\17e\3\2\2\2\21n\3\2\2\2\23u\3\2\2\2\25w\3\2\2\2\27~\3")
        buf.write("\2\2\2\31\u0080\3\2\2\2\33\u0082\3\2\2\2\35\u0084\3\2")
        buf.write("\2\2\37\u008c\3\2\2\2!\u008e\3\2\2\2#\u0093\3\2\2\2%\u009b")
        buf.write("\3\2\2\2\'\u009e\3\2\2\2)\u00a4\3\2\2\2+\u00aa\3\2\2\2")
        buf.write("-\u00ac\3\2\2\2/\u00ae\3\2\2\2\61\u00b0\3\2\2\2\63\u00b2")
        buf.write("\3\2\2\2\65\u00b4\3\2\2\2\67\u00b7\3\2\2\29\u00ba\3\2")
        buf.write("\2\2;\u00bd\3\2\2\2=\u00c0\3\2\2\2?\u00c2\3\2\2\2A\u00c4")
        buf.write("\3\2\2\2C\u00c6\3\2\2\2E\u00c8\3\2\2\2G\u00d0\3\2\2\2")
        buf.write("I\u00dc\3\2\2\2KL\7R\2\2LM\7T\2\2MN\7Q\2\2NO\7I\2\2O\4")
        buf.write("\3\2\2\2PQ\7=\2\2Q\6\3\2\2\2RS\7H\2\2ST\7K\2\2TU\7O\2")
        buf.write("\2U\b\3\2\2\2VW\7\60\2\2W\n\3\2\2\2XY\7K\2\2YZ\7P\2\2")
        buf.write("Z[\7V\2\2[\\\7G\2\2\\]\7K\2\2]^\7T\2\2^_\7Q\2\2_\f\3\2")
        buf.write("\2\2`a\7T\2\2ab\7G\2\2bc\7C\2\2cd\7N\2\2d\16\3\2\2\2e")
        buf.write("f\7D\2\2fg\7Q\2\2gh\7Q\2\2hi\7N\2\2ij\7G\2\2jk\7C\2\2")
        buf.write("kl\7P\2\2lm\7Q\2\2m\20\3\2\2\2no\7U\2\2op\7V\2\2pq\7T")
        buf.write("\2\2qr\7K\2\2rs\7P\2\2st\7I\2\2t\22\3\2\2\2uv\7.\2\2v")
        buf.write("\24\3\2\2\2wx\7H\2\2xy\7W\2\2yz\7P\2\2z{\7E\2\2{|\7C\2")
        buf.write("\2|}\7Q\2\2}\26\3\2\2\2~\177\7*\2\2\177\30\3\2\2\2\u0080")
        buf.write("\u0081\7+\2\2\u0081\32\3\2\2\2\u0082\u0083\7<\2\2\u0083")
        buf.write("\34\3\2\2\2\u0084\u0085\7t\2\2\u0085\u0086\7g\2\2\u0086")
        buf.write("\u0087\7v\2\2\u0087\u0088\7q\2\2\u0088\u0089\7t\2\2\u0089")
        buf.write("\u008a\7p\2\2\u008a\u008b\7g\2\2\u008b\36\3\2\2\2\u008c")
        buf.write("\u008d\7?\2\2\u008d \3\2\2\2\u008e\u008f\7N\2\2\u008f")
        buf.write("\u0090\7G\2\2\u0090\u0091\7K\2\2\u0091\u0092\7C\2\2\u0092")
        buf.write("\"\3\2\2\2\u0093\u0094\7K\2\2\u0094\u0095\7O\2\2\u0095")
        buf.write("\u0096\7R\2\2\u0096\u0097\7T\2\2\u0097\u0098\7K\2\2\u0098")
        buf.write("\u0099\7O\2\2\u0099\u009a\7C\2\2\u009a$\3\2\2\2\u009b")
        buf.write("\u009c\7U\2\2\u009c\u009d\7G\2\2\u009d&\3\2\2\2\u009e")
        buf.write("\u009f\7G\2\2\u009f\u00a0\7P\2\2\u00a0\u00a1\7V\2\2\u00a1")
        buf.write("\u00a2\7C\2\2\u00a2\u00a3\7Q\2\2\u00a3(\3\2\2\2\u00a4")
        buf.write("\u00a5\7U\2\2\u00a5\u00a6\7G\2\2\u00a6\u00a7\7P\2\2\u00a7")
        buf.write("\u00a8\7C\2\2\u00a8\u00a9\7Q\2\2\u00a9*\3\2\2\2\u00aa")
        buf.write("\u00ab\7#\2\2\u00ab,\3\2\2\2\u00ac\u00ad\7(\2\2\u00ad")
        buf.write(".\3\2\2\2\u00ae\u00af\7~\2\2\u00af\60\3\2\2\2\u00b0\u00b1")
        buf.write("\7@\2\2\u00b1\62\3\2\2\2\u00b2\u00b3\7>\2\2\u00b3\64\3")
        buf.write("\2\2\2\u00b4\u00b5\7@\2\2\u00b5\u00b6\7?\2\2\u00b6\66")
        buf.write("\3\2\2\2\u00b7\u00b8\7>\2\2\u00b8\u00b9\7?\2\2\u00b98")
        buf.write("\3\2\2\2\u00ba\u00bb\7?\2\2\u00bb\u00bc\7?\2\2\u00bc:")
        buf.write("\3\2\2\2\u00bd\u00be\7#\2\2\u00be\u00bf\7?\2\2\u00bf<")
        buf.write("\3\2\2\2\u00c0\u00c1\7-\2\2\u00c1>\3\2\2\2\u00c2\u00c3")
        buf.write("\7/\2\2\u00c3@\3\2\2\2\u00c4\u00c5\7,\2\2\u00c5B\3\2\2")
        buf.write("\2\u00c6\u00c7\7\61\2\2\u00c7D\3\2\2\2\u00c8\u00cc\t\2")
        buf.write("\2\2\u00c9\u00cb\t\3\2\2\u00ca\u00c9\3\2\2\2\u00cb\u00ce")
        buf.write("\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd")
        buf.write("F\3\2\2\2\u00ce\u00cc\3\2\2\2\u00cf\u00d1\t\4\2\2\u00d0")
        buf.write("\u00cf\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d0\3\2\2\2")
        buf.write("\u00d2\u00d3\3\2\2\2\u00d3\u00da\3\2\2\2\u00d4\u00d6\7")
        buf.write("\60\2\2\u00d5\u00d7\t\4\2\2\u00d6\u00d5\3\2\2\2\u00d7")
        buf.write("\u00d8\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d8\u00d9\3\2\2\2")
        buf.write("\u00d9\u00db\3\2\2\2\u00da\u00d4\3\2\2\2\u00da\u00db\3")
        buf.write("\2\2\2\u00dbH\3\2\2\2\u00dc\u00dd\t\5\2\2\u00dd\u00de")
        buf.write("\3\2\2\2\u00de\u00df\b%\2\2\u00dfJ\3\2\2\2\7\2\u00cc\u00d2")
        buf.write("\u00d8\u00da\3\b\2\2")
        return buf.getvalue()


class PortugolLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    ID = 34
    NUM = 35
    WS = 36

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'PROG'", "';'", "'FIM'", "'.'", "'INTEIRO'", "'REAL'", "'BOOLEANO'", 
            "'STRING'", "','", "'FUNCAO'", "'('", "')'", "':'", "'retorne'", 
            "'='", "'LEIA'", "'IMPRIMA'", "'SE'", "'ENTAO'", "'SENAO'", 
            "'!'", "'&'", "'|'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", 
            "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "ID", "NUM", "WS" ]

    grammarFileName = "Portugol.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


